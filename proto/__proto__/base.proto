syntax = "proto2";

/** 基础功能 */
package base;

import "common.proto";

option go_package = "./pb";

/** 初始化请求 */
message InitReq {
  message C2S {
    /** 客户端版本号，clientVer = "."以前的数 * 100 + "."以后的，举例：1.1版本的 clientVer 为1 * 100 + 1 = 101，2.21版本为2 * 100 + 21 = 221 */
    required int32 clientVer = 1;
    /** 客户端唯一标识，无生具体生成规则，客户端自己保证唯一性即可 */
    required string clientID = 2;
    /** 此连接是否接收市场状态、交易需要重新解锁等等事件通知，true 代表接收，OpenD 就会向此连接推送这些通知，反之 false 代表不接收不推送如果通信要加密，首先得在 OpenD 和客户端都配置 RSA 密钥，不配置始终不加密 */
    optional bool recvNotify = 3;
    /**
      如果配置了 RSA 密钥且指定的加密算法不为 PacketEncAlgo_None 则加密(即便这里不设置，配置了 RSA 密钥，也会采用默认加密方式)，默认采用 FTAES_ECB 算法
      指定包加密算法，参见 Common.PacketEncAlgo 的枚举定义
    */
    optional int32 packetEncAlgo = 4;
    /**指定这条连接上的推送协议格式，若不指定则使用 push_proto_type 配置项*/
    optional int32 pushProtoFmt = 5;
  }
  required C2S c2s = 1;
}

/** 初始化响应 */
message InitRes {
  message S2C {
    /** OpenD 的版本号 */
    required int32 serverVer = 1;
    /** OpenD 登录的用户 ID */
    required uint64 loginUserID = 2;
    /** 此连接的连接 ID，连接的唯一标识 */
    required uint64 connID = 3;
    /** 此连接后续 AES 加密通信的 Key，固定为16字节长字符串 */
    required string connAESKey = 4;
    /** 心跳保活间隔 */
    required int32 keepAliveInterval = 5;
    /** AES 加密通信 CBC 加密模式的 iv，固定为16字节长字符串 */
    optional string aesCBCiv = 6; //
  }
  required int32 retType = 1;
  optional string retMsg = 2;
  optional int32 errCode = 3;
  optional S2C s2c = 4;
}

/** 交易解锁请求 */
message UnlockReq {
  message C2S {
    required bool unlock = 1; //true 解锁交易，false 锁定交易
    optional string pwdMD5 = 2; //交易密码的 32 位 MD5 加密（全小写），解锁交易必须要填密码，锁定交易不需要验证密码，可不填
    optional common.SecurityFirm securityFirm = 3; //券商标识，取值见 Trd_Common.SecurityFirm
  }
  required C2S c2s = 1;
}

/** 交易解锁响应 */
message UnlockRes {
  message S2C {
  }
  required int32 retType = 1; //RetType，返回结果
  optional string retMsg = 2;
  optional int32 errCode = 3;
  optional S2C s2c = 4;
}

/** 心跳检测：ping */
message Ping {
  message C2S {
    required int64 time = 1;
  }
  required C2S c2s = 1;
}

/** 心跳响应 */
message Pong {
  message S2C {
    required int64 time = 1;
  }
  required int32 retType = 1;
  optional string retMsg = 2;
  optional int32 errCode = 3;
  optional S2C s2c = 4;
}

/**获取账户列表请求*/
message AccReq {
  message C2S {
    required uint64 userID = 1; //历史原因，目前已废弃，填0即可
  	optional common.TrdCategory trdCategory = 2; //交易品类，参考 Trd_Common.TrdCategory
  	optional bool needGeneralSecAccount = 3;
  }
  required C2S c2s = 1;
}

/**获取账户列表响应*/
message AccRes {
  message S2C {
    repeated common.TrdAcc accList = 1;
  }
  required int32 retType = 1; //RetType，返回结果
  optional string retMsg = 2;
  optional int32 errCode = 3;
  optional S2C s2c = 4;
}

/**查询账户资金请求*/
message FundReq {
  message C2S {
    required common.TrdHeader header = 1; //交易公共参数头
  	optional bool refreshCache = 2;
  	optional int32 currency = 3;
  }
  required C2S c2s = 1;
}

/**查询账户资金响应*/
message FundRes {
  message S2C {
    required common.TrdHeader header = 1; //交易公共参数头
    optional common.Funds funds = 2; //账户资金
  }
  required int32 retType = 1; //RetType，返回结果
  optional string retMsg = 2;
  optional int32 errCode = 3;
  optional S2C s2c = 4;
}

/**查询股票基本信息请求*/
message stockReq {
  message C2S {
    repeated common.Security securityList = 1; //股票
  }
  required C2S c2s = 1;
}

/**查询股票基本信息响应*/
message stockRes {
  message Snapshot {
    /** 快照基本数据*/
    required common.SnapshotBasicData basic = 1;
    /** 正股快照额外数据*/
    optional common.EquitySnapshotExData equityExData = 2;
    optional common.WarrantSnapshotExData warrantExData = 3; //窝轮快照额外数据
    /** 期权类型额外数据*/
    optional common.OptionSnapshotExData optionExData = 4;
    optional common.IndexSnapshotExData indexExData = 5; //指数快照额外数据
    optional common.PlateSnapshotExData plateExData = 6; //板块快照额外数据
    optional common.FutureSnapshotExData futureExData = 7; //期货类型额外数据
    optional common.TrustSnapshotExData trustExData = 8; //基金类型额外数据
  }
  message S2C {
    repeated Snapshot snapshotList = 1; //股票快照
  }
  required int32 retType = 1; //RetType，返回结果
  optional string retMsg = 2;
  optional int32 errCode = 3;
  optional S2C s2c = 4;
}

/**获取资金流向请求*/
message CapFlowReq {
  message C2S {
    required common.Security security = 1; //股票
    optional int32 periodType = 2; // Qot_Common.PeriodType 周期类型
    optional string beginTime = 3; // 开始时间（格式：yyyy-MM-dd），仅周期类型不为实时有效
    optional string endTime = 4; // 结束时间（格式：yyyy-MM-dd），仅周期类型不为实时有效
  }
  required C2S c2s = 1;
}

/**获取资金流向响应*/
message CapFlowRes {
  message CapitalFlowItem {
    required double inFlow = 1; // 整体净流入
    optional string time = 2; //开始时间字符串,以分钟为单位
    optional double timestamp = 3; //开始时间戳
    optional double mainInFlow = 4; // 主力大单净流入，仅周期类型不为实时有效
    optional double superInFlow = 5; // 特大单净流入
    optional double bigInFlow = 6; // 大单净流入
    optional double midInFlow = 7; // 中单净流入
    optional double smlInFlow = 8; // 小单净流入
  }
  message S2C {
    repeated CapitalFlowItem flowItemList = 1; //资金流向
    optional string lastValidTime = 2; //数据最后有效时间字符串
    optional double lastValidTimestamp = 3; //数据最后有效时间戳
  }
  required int32 retType = 1 [default = -400]; //RetType,返回结果
	optional string retMsg = 2;
	optional int32 errCode = 3;

	optional S2C s2c = 4;
}

/**获取资金分布请求*/
message CapDistReq {
  message C2S {
    required common.Security security = 1; //股票
  }
  required C2S c2s = 1;
}

/**获取资金分布响应*/
message CapDistRes {
  message S2C {
    optional double capitalInSuper = 9; // 流入资金额度，特大单
    required double capitalInBig = 1; // 流入资金额度，大单
    required double capitalInMid = 2; // 流入资金额度，中单
    required double capitalInSmall = 3; // 流入资金额度，小单
    optional double capitalOutSuper = 10; // 流出资金额度，特大单
    required double capitalOutBig = 4; // 流出资金额度，大单
    required double capitalOutMid = 5; // 流出资金额度，中单
    required double capitalOutSmall = 6; // 流出资金额度，小单
    optional string updateTime = 7; // 更新时间字符串
    optional double updateTimestamp = 8; // 更新时间戳
  }
  required int32 retType = 1 [default = -400]; //RetType,返回结果
	optional string retMsg = 2;
	optional int32 errCode = 3;

	optional S2C s2c = 4;
}


/**获取账户持仓请求*/
message PositionReq {
  message C2S {
    required common.TrdHeader header = 1; //交易公共参数头
    /**过滤条件*/
    optional common.TrdFilterConditions filterConditions = 2;
    /**过滤盈亏百分比下限，高于此比例的会返回，比如传10.0，返回盈亏比例大于10%的持仓*/
    optional double filterPLRatioMin = 3;
    /**过滤盈亏百分比上限，低于此比例的会返回，比如传20.0，返回盈亏比例小于20%的持仓*/
    optional double filterPLRatioMax = 4;
    /**
      立即刷新 OpenD 缓存的此数据，默认不填。true 向服务器获取最新数据更新缓存并返回；flase 或没填则返回 OpenD 缓存的数据，不会向服务器请求。

      正常情况下，服务器有更新就会立即推送到 OpenD，OpenD 缓存着数据，API 请求过来，返回同步的缓存数据，一般不需要指定刷新缓存，保证快速返回且减少对服务器的压力。如果遇到丢包等情况，可能出现缓存数据与服务器不一致，用户如果发现数据更新有异样，可指定刷新缓存，解决数据同步的问题。
    */
    optional bool refreshCache = 5;
  }
  required C2S c2s = 1;
}

/**获取账户持仓响应*/
message PositionRes {
  message S2C {
    required common.TrdHeader header = 1; //交易公共参数头
	  repeated common.Position positionList = 2; //持仓列表
  }
  required int32 retType = 1 [default = -400]; //RetType,返回结果
	optional string retMsg = 2;
	optional int32 errCode = 3;

	optional S2C s2c = 4;
}

/**获取可卖数量请求*/
message SellableReq {
  message C2S {
    required common.TrdHeader header = 1; //交易公共参数头
    required common.OrderType orderType = 2; //订单类型，参见 Trd_Common.OrderType 的枚举定义
    required string code = 3; //代码，港股必须是5位数字，A 股必须是6位数字，美股没限制
    required double price = 4; //价格，（证券账户精确到小数点后 3 位，期货账户精确到小数点后 9 位，超出部分会被舍弃）。如果是竞价、市价单，请也填入一个当前价格，服务器才好计算
    optional uint64 orderID = 5; //订单号，新下订单不需要，如果是修改订单就需要把原订单号带上才行，因为改单的最大买卖数量会包含原订单数量。
    //为保证与下单的价格同步，也提供调整价格选项，以下2个为调整价格使用，对港、A 股有意义，因为港股有价位，A 股2位精度，美股可不传
    optional bool adjustPrice = 6; //是否调整价格，如果价格不合法，是否调整到合法价位，true 调整，false 不调整
    optional double adjustSideAndLimit = 7; //调整方向和调整幅度百分比限制，正数代表向上调整，负数代表向下调整，具体值代表调整幅度限制，如：0.015代表向上调整且幅度不超过1.5%；-0.01代表向下调整且幅度不超过1%
    optional common.TrdSecMarket secMarket = 8; //证券所属市场，参见 TrdSecMarket 的枚举定义
    optional string orderIDEx = 9; //表示服务器订单id，可以用来代替orderID，和orderID二选一
  }
  required C2S c2s = 1;
}

/**获取可卖数量响应*/
message SellableRes {
  message S2C {
    required common.TrdHeader header = 1; //交易公共参数头
	  repeated common.MaxTrdQtys maxTrdQtys = 2; //持仓列表
  }
  required int32 retType = 1 [default = -400]; //RetType,返回结果
	optional string retMsg = 2;
	optional int32 errCode = 3;

	optional S2C s2c = 4;
}
